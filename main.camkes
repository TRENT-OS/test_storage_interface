/* Copyright (C) 2020, HENSOLDT Cyber GmbH */

import <std_connector.camkes>;

import "components/StorageInterfaceTester/StorageInterfaceTester.camkes";

#include "system_config.h"

#include "ChanMux/ChanMux.camkes"
ChanMux_DEFINE_COMPONENT(ChanMux,
        chanMuxStorage, chan)

#include "ChanMux_Storage/ChanMux_Storage.camkes"

#include "RamDisk/RamDisk.camkes"
DECLARE_COMPONENT_RamDisk(RamDisk)

#include "StorageServer/camkes/StorageServer.camkes"
DECLARE_COMPONENT_StorageServer(StorageServer)

#include "plat_system_config.h"

assembly {
    composition {

        // ChanMux + UART
        ChanMux_DECLARE_AND_CONNECT_INSTANCE_TO_UART(ChanMux, chanMux)

        // ChanMux_Storage
        component   ChanMux_Storage chanMuxStorage;

        ChanMux_INSTANCE_CONNECT_INTERFACE(chanMux, chanMuxStorage)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, chanMuxStorage, chan)

        // RamDisk
        component   RamDisk ramDisk;

        // Testers
        component   StorageInterfaceTester tester_ramDisk;
        component   StorageInterfaceTester tester_chanMux;
        component   StorageInterfaceTester tester_storageServer1;
        component   StorageInterfaceTester tester_storageServer2;
        component   StorageInterfaceTester tester_storageServer3;

        connection  seL4RPCCall         tester_ramDisk_rpc         (from tester_ramDisk.storage_rpc,  to ramDisk.storage_rpc);
        connection  seL4SharedData      tester_ramDisk_port        (from tester_ramDisk.storage_port, to ramDisk.storage_port);

        connection  seL4RPCCall         tester_chanMux_storage     (from tester_chanMux.storage_rpc,  to chanMuxStorage.storage_rpc);
        connection  seL4SharedData      tester_chanMux_storage_port(from tester_chanMux.storage_port, to chanMuxStorage.storage_port);

        // Storage Server
        component   RamDisk             storageServerStorage;

        DECLARE_AND_CONNECT_INSTANCE_StorageServer(
            StorageServer, storageServer,
            storageServerStorage.storage_rpc, storageServerStorage.storage_port,
            tester_storageServer1.storage_rpc, tester_storageServer1.storage_port,
            tester_storageServer2.storage_rpc, tester_storageServer2.storage_port,
            tester_storageServer3.storage_rpc, tester_storageServer3.storage_port)
    }

    configuration {
        CONFIGURE_INSTANCE_StorageServer(
            storageServer,
            (0 * STORAGE_SERVER_CLIENT_SZ), STORAGE_SERVER_CLIENT_SZ,
            (1 * STORAGE_SERVER_CLIENT_SZ), STORAGE_SERVER_CLIENT_SZ,
            (2 * STORAGE_SERVER_CLIENT_SZ), STORAGE_SERVER_CLIENT_SZ)

        ASSIGN_CLIENT_BADGE_StorageServer(
            tester_storageServer1, storage_rpc, STORAGESERVER_TESTER_IF1_ID)
        ASSIGN_CLIENT_BADGE_StorageServer(
            tester_storageServer2, storage_rpc, STORAGESERVER_TESTER_IF2_ID)
        ASSIGN_CLIENT_BADGE_StorageServer(
            tester_storageServer3, storage_rpc, STORAGESERVER_TESTER_IF3_ID)

        // assign endpoint badges for n:1 RPC interface of ChanMUX. The generic
        // naming scheme is <component>.<interface>_attributes = <badge ID>
        ChanMux_ASSIGN_CLIENT_BADGE(chanMux, chanMuxStorage, CHANMUX_ID)

        // TODO Tasks are having different priorities so that their outputs
        // don't overlap. Final solution is described in the
        // https://jira.hensoldt-cyber.systems/browse/SEOS-1799
        tester_ramDisk._priority            = 150;
        tester_storageServer1._priority     = 140;
        tester_storageServer2._priority     = 130;
        tester_storageServer3._priority     = 120;
        tester_chanMux._priority            = 100;
    }
}
