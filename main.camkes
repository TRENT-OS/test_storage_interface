/* Copyright (C) 2020, HENSOLDT Cyber GmbH */

import <std_connector.camkes>;

import "components/StorageInterfaceTester/StorageInterfaceTester.camkes";

#include "system_config.h"

#include "ChanMux/ChanMux_UART.camkes"
ChanMux_UART_COMPONENT_DEFINE(
    ChanMux_UART,
    chanMuxStorage, chan
)

#include "ChanMux_Storage/ChanMux_Storage.camkes"

#include "RamDisk/RamDisk.camkes"
RamDisk_COMPONENT_DECLARE(RamDisk)

#include "StorageServer/camkes/StorageServer.camkes"
StorageServer_COMPONENT_DECLARE(StorageServer)

#include "plat_system_config.h"

assembly {
    composition {

        // ChanMux_UART + UART
        component ChanMux_UART chanMux_UART;
        component UART_CHANMUX uart;
        // ChanMux_Storage
        component   ChanMux_Storage chanMuxStorage;

        ChanMux_UART_INSTANCE_CONNECT(
            chanMux_UART,
            uart
        )
        ChanMux_UART_INSTANCE_CONNECT_CLIENT(
            chanMux_UART,
            chanMuxStorage, chan
        )

        // RamDisk
        component   RamDisk ramDisk;

        // Testers
        component   StorageInterfaceTester tester_ramDisk;
        component   StorageInterfaceTester tester_chanMux;
        component   StorageInterfaceTester tester_storageServer1;
        component   StorageInterfaceTester tester_storageServer2;
        component   StorageInterfaceTester tester_storageServer3;

        connection  seL4RPCCall         tester_ramDisk_rpc         (from tester_ramDisk.storage_rpc,  to ramDisk.storage_rpc);
        connection  seL4SharedData      tester_ramDisk_port        (from tester_ramDisk.storage_port, to ramDisk.storage_port);

        connection  seL4RPCCall         tester_chanMux_storage     (from tester_chanMux.storage_rpc,  to chanMuxStorage.storage_rpc);
        connection  seL4SharedData      tester_chanMux_storage_port(from tester_chanMux.storage_port, to chanMuxStorage.storage_port);

        // Storage Server
        component   RamDisk             storageServerStorage;
        component   StorageServer       storageServer;

        StorageServer_INSTANCE_CONNECT(
            storageServer,
            storageServerStorage.storage_rpc, storageServerStorage.storage_port
        )
        StorageServer_INSTANCE_CONNECT_CLIENTS(
            storageServer,
            tester_storageServer1.storage_rpc, tester_storageServer1.storage_port,
            tester_storageServer2.storage_rpc, tester_storageServer2.storage_port,
            tester_storageServer3.storage_rpc, tester_storageServer3.storage_port
        )
    }

    configuration {
        StorageServer_INSTANCE_CONFIGURE_CLIENTS(
            storageServer,
            (0 * STORAGE_SERVER_CLIENT_SZ), STORAGE_SERVER_CLIENT_SZ,
            (1 * STORAGE_SERVER_CLIENT_SZ), STORAGE_SERVER_CLIENT_SZ,
            (2 * STORAGE_SERVER_CLIENT_SZ), STORAGE_SERVER_CLIENT_SZ
        )

        StorageServer_CLIENT_ASSIGN_BADGE(
            tester_storageServer1.storage_rpc, STORAGESERVER_TESTER_IF1_ID
        )
        StorageServer_CLIENT_ASSIGN_BADGE(
            tester_storageServer2.storage_rpc, STORAGESERVER_TESTER_IF2_ID
        )
        StorageServer_CLIENT_ASSIGN_BADGE(
            tester_storageServer3.storage_rpc, STORAGESERVER_TESTER_IF3_ID
        )

        ChanMux_UART_CLIENT_ASSIGN_BADGES(
            chanMuxStorage.chanMux_Rpc
        )

        // TODO Tasks are having different priorities so that their outputs
        // don't overlap. Final solution is described in the
        // https://jira.hensoldt-cyber.systems/browse/SEOS-1799
        tester_ramDisk._priority            = 150;
        tester_storageServer1._priority     = 140;
        tester_storageServer2._priority     = 130;
        tester_storageServer3._priority     = 120;
        tester_chanMux._priority            = 100;
    }
}
