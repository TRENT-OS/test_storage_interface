/*
 * Copyright (C) 2020-2021, HENSOLDT Cyber GmbH
 */

import <std_connector.camkes>;

import "components/StorageInterfaceTester/StorageInterfaceTester.camkes";

#include "system_config.h"

#include "RamDisk/RamDisk.camkes"
RamDisk_COMPONENT_DEFINE(RamDisk)

#include "StorageServer/camkes/StorageServer.camkes"
StorageServer_COMPONENT_DEFINE(StorageServer)

#include "plat.camkes"
#include "syslog.camkes"

assembly {
    composition {

        // RamDisk
        component   RamDisk ramDisk;

        // Testers
        component   StorageInterfaceTester tester_ramDisk;
        component   StorageInterfaceTester tester_storageServer1;
        component   StorageInterfaceTester tester_storageServer2;
        component   StorageInterfaceTester tester_storageServer3;

        connection  seL4RPCCall         tester_ramDisk_rpc         (from tester_ramDisk.storage_rpc,  to ramDisk.storage_rpc);
        connection  seL4SharedData      tester_ramDisk_port        (from tester_ramDisk.storage_port, to ramDisk.storage_port);

        // Storage Server
        component   RamDisk             storageServerStorage;
        component   StorageServer       storageServer;

        StorageServer_INSTANCE_CONNECT(
            storageServer,
            storageServerStorage.storage_rpc, storageServerStorage.storage_port
        )
        StorageServer_INSTANCE_CONNECT_CLIENTS(
            storageServer,
            tester_storageServer1.storage_rpc, tester_storageServer1.storage_port,
            tester_storageServer2.storage_rpc, tester_storageServer2.storage_port,
            tester_storageServer3.storage_rpc, tester_storageServer3.storage_port
        )
        SysLogger_INSTANCE_CONNECT_CLIENTS(
                sysLogger,
                tester_ramDisk,
                tester_storageServer1,
                tester_storageServer2,
                tester_storageServer3
        )
    }

    configuration {
        StorageServer_INSTANCE_CONFIGURE_CLIENTS(
            storageServer,
            (0 * TEST_STORAGE_MIN_SIZE), TEST_STORAGE_MIN_SIZE,
            (1 * TEST_STORAGE_MIN_SIZE), TEST_STORAGE_MIN_SIZE,
            (2 * TEST_STORAGE_MIN_SIZE), TEST_STORAGE_MIN_SIZE
        )

        StorageServer_CLIENT_ASSIGN_BADGES(
            tester_storageServer1.storage_rpc,
            tester_storageServer2.storage_rpc,
            tester_storageServer3.storage_rpc
        )

        ramDisk.storage_size = TEST_STORAGE_MIN_SIZE;

        // Storage Server's underlying storage must be large enough for all
        // clients (3 at the moment).
        storageServerStorage.storage_size = (3 * TEST_STORAGE_MIN_SIZE);

        // Set drivers's priority to low so that printf() collisions with
        // application layer are avoided. This is a temporary workaround.
        // The application layer components have already synchronized printf()
        // as they use SysLogger but it should be the same for the following
        // components here below (those to which we are setting a lower
        // priority).
        // Furthermore this workaround by itself it is not sufficient to avoid
        // collisions. The log level needs to be adjusted too (INFO level, not
        // more verbose).
        ramDisk.priority                = 30;
        storageServerStorage.priority   = 20;
        storageServer.priority          = 10;
    }
}
