/* Copyright (C) 2020-2021, HENSOLDT Cyber GmbH */
#pragma once

//------------------------------------------------------------------------------
// StorageServer Configuration
//
// Depending on the platform we want to write to the SD Card at a different
// offset, which is done with the help of the StorageServer.
//
// Note that offsets and sizes are chosen arbitrarily i.e.:
//
// 1. BOOT_STORAGE_SIZE must be large enough to hold a boot script and the
//    binary to boot (currently ~13 MiB).
// 2. TESTAPP_STORAGE_SIZE must be at least three times bigger than the
//    TEST_DATA_SIZE (see test_storage_size_pos()).
//------------------------------------------------------------------------------
#define MiB                     (1024 * 1024)

// Reserved for GPT
#define GPT_STORAGE_SIZE        (1 * MiB)

#define BOOT_STORAGE_OFFSET     GPT_STORAGE_SIZE
#define BOOT_STORAGE_SIZE       (128 * MiB)

#define TESTAPP_STORAGE_OFFSET  (BOOT_STORAGE_OFFSET + BOOT_STORAGE_SIZE)
#define TESTAPP_STORAGE_SIZE    (128 * MiB)

//------------------------------------------------------------------------------
// Platform related CAmkES definitions
//------------------------------------------------------------------------------

#include "syslog.camkes"
#include "SdHostController/SdHostController.camkes"
SdHostController_COMPONENT_DEFINE(SdHostController);
SdHostController_HW_COMPONENT_DEFINE(SdHostController_HW);

#include "ChanMux/ChanMux_UART.camkes"
ChanMux_UART_COMPONENT_DEFINE(
    ChanMux_UART,
    chanMuxStorage, chan
)

#include "Storage_ChanMux/Storage_ChanMux.camkes"
Storage_ChanMux_COMPONENT_DEFINE(Storage_ChanMux)

assembly {
    composition {
        // ChanMux_UART + UART
        component ChanMux_UART chanMux_UART;
        component UART_CHANMUX uart;
        // Storage_ChanMux
        component   Storage_ChanMux chanMuxStorage;

        ChanMux_UART_INSTANCE_CONNECT(
            chanMux_UART,
            uart
        )
        ChanMux_UART_INSTANCE_CONNECT_CLIENT(
            chanMux_UART,
            chanMuxStorage, chan
        )

        component   StorageInterfaceTester tester_chanMux;

        Storage_ChanMux_INSTANCE_CONNECT_CLIENT(
            chanMuxStorage,
            tester_chanMux.storage_rpc, tester_chanMux.storage_port
        )

        component   StorageInterfaceTester tester_sdhc;

        // SDHC
        component   SdHostController_HW     sdhcHw;
        component   SdHostController        sdhc;
        SdHostController_INSTANCE_CONNECT(
            sdhc, sdhcHw
        )

        // StorageServer
        component   StorageServer   storageServerSd;
        StorageServer_INSTANCE_CONNECT(
            storageServerSd,
            sdhc.storage_rpc, sdhc.storage_port
        )
        StorageServer_INSTANCE_CONNECT_CLIENTS(
            storageServerSd,
            tester_sdhc.storage_rpc, tester_sdhc.storage_port
        )
        SysLogger_INSTANCE_CONNECT_CLIENTS(
            sysLogger,
            tester_chanMux,
            tester_sdhc
        )

    }

    configuration {

        StorageServer_INSTANCE_CONFIGURE_CLIENTS(
            storageServerSd,
            TESTAPP_STORAGE_OFFSET, TESTAPP_STORAGE_SIZE
        )
        StorageServer_CLIENT_ASSIGN_BADGES(
            tester_sdhc.storage_rpc
        )

        // Use the platform specific default settings
        SdHostController_INSTANCE_CONFIGURE(sdhc)
        SdHostController_HW_INSTANCE_CONFIGURE(sdhcHw)

        ChanMux_UART_CLIENT_ASSIGN_BADGES(
            chanMuxStorage.chanMux_Rpc
        )

        chanMuxStorage.priority = 50;
    }
}
