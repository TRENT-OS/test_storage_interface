/* Copyright (C) 2020, HENSOLDT Cyber GmbH */

#include "SdHostController/SdHostController.camkes"
SdHostController_COMPONENT_DECLARE(SdHostController);
SdHostController_HW_COMPONENT_DECLARE(SdHostController_HW);

#ifndef SDIO_PORT
#error "Please specify the desired SDIO port."
#endif

assembly {
    composition {

        component   StorageInterfaceTester tester_sdhc;

        // SDHC
        component   SdHostController_HW     sdhcHw;
        component   SdHostController        sdhc;
        SdHostController_INSTANCE_CONNECT(
            sdhc, sdhcHw
        )

        // StorageServer
        component   StorageServer   storageServerSd;
        StorageServer_INSTANCE_CONNECT(
            storageServerSd,
            sdhc.storage_rpc, sdhc.storage_port
        )
        StorageServer_INSTANCE_CONNECT_CLIENTS(
            storageServerSd,
            tester_sdhc.storage_rpc, tester_sdhc.storage_port
        )

    }

    configuration {

        StorageServer_INSTANCE_CONFIGURE_CLIENTS(
            storageServerSd,
            TESTAPP_STORAGE_OFFSET, TESTAPP_STORAGE_SIZE
        )
        StorageServer_CLIENT_ASSIGN_BADGES(
            tester_sdhc.storage_rpc
        )

#if (SDIO_PORT == 1)
        SdHostController_HW_INSTANCE_CONFIGURE(
            sdhcHw, 1
        )
        SdHostController_INSTANCE_CONFIGURE(
            sdhc, 1
        )
#elif (SDIO_PORT == 2)
        SdHostController_HW_INSTANCE_CONFIGURE(
            sdhcHw, 2
        )
        SdHostController_INSTANCE_CONFIGURE(
            sdhc, 2
        )
#elif (SDIO_PORT == 3)
        SdHostController_HW_INSTANCE_CONFIGURE(
            sdhcHw, 3
        )
        SdHostController_INSTANCE_CONFIGURE(
            sdhc, 3
        )
#elif (SDIO_PORT == 4)
        SdHostController_HW_INSTANCE_CONFIGURE(
            sdhcHw, 4
        )
        SdHostController_INSTANCE_CONFIGURE(
            sdhc, 4
        )
#endif

        tester_sdhc._priority = 110;
    }
}
